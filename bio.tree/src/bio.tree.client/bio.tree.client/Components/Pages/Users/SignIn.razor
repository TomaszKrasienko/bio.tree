@page "/sign-in"
@using bio.tree.client.Models.Commands.User
@using bio.tree.client.Services.Abstractions
@using bio.tree.client.Auth.Abstractions
@using bio.tree.shared
@using bio.tree.shared.DTO

@inject IUserService UserService;
@inject IAuthService AuthService;
@rendermode InteractiveServer

<div class="row">
    <div class="col-md-4 offset-4">
        <EditForm FormName="sign-in" EditContext="_signInContext" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator/>
            <div class="row">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="_command.Email"></InputText>
                <ValidationMessage For="@(() => _command.Email)"></ValidationMessage>
            </div>
            <div class="row">
                <label for="password">Password</label>
                <InputText id="password" class="form-control" @bind-Value="_command.Password"></InputText>
                <ValidationMessage For="@(() => _command.Password)"></ValidationMessage>
            </div>
            <div class="row submit-btn">
                <div class="col-md-4 offset-4">
                    <div class="row">
                        <input type="submit" class="btn btn-dark" value="Confirm"/>
                    </div>
                </div>
            </div>
        </EditForm>        
        @if (_isValid)               
       {
           <p class="error-message">@_requestErrorMessage</p>
       }
    </div>
</div>

@code {
    SignInCommand _command;
    EditContext _signInContext;
    bool _isValid = true;
    string _requestErrorMessage = string.Empty;

    protected override void OnInitialized()
    {
        _command = new SignInCommand();
        _signInContext = new EditContext(_command);
    }

    async Task HandleSubmit()
    {
        var response = await UserService.SignIn(_command);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadFromJsonAsync<JwtTokenDto>();
            await AuthService.SetToken(token.Token);
        }        
        else
        {
            _isValid = false;
            var responseMessage = await response.Content.ReadFromJsonAsync<ErrorDto>();
            _requestErrorMessage = responseMessage.Message;
        }
    }
}