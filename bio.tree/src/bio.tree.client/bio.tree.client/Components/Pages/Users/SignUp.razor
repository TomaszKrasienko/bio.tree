@page "/sign-up"
@using bio.tree.client.Services.Abstractions
@using bio.tree.shared
@using bio.tree.client.Models.Commands.User
@inject IUserService UserService;
@rendermode InteractiveServer


<div class="row">
    <div class="col-md-4 offset-4">
        <EditForm FormName="sign-up" OnValidSubmit="HandleSubmit" EditContext="_signUpContext">
            <DataAnnotationsValidator/>
            <div class="row">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="_command.Email"></InputText>
                <ValidationMessage For="@(() => _command.Email)"></ValidationMessage>
            </div>
            <div class="row">
                <label for="firstName">FirstName</label>
                <InputText id="firstName" class="form-control" @bind-Value="_command.FirstName"></InputText>
                <ValidationMessage For="@(() => _command.FirstName)"></ValidationMessage>
            </div>
            <div class="row">
                <label>LastName</label>
                <InputText id="lastName" class="form-control" @bind-Value="_command.LastName"></InputText>
                <ValidationMessage For="@(() => _command.LastName)"></ValidationMessage>
            </div>
            <div class="row">
                <label>Nickname</label>
                <InputText id="nickname" class="form-control" @bind-Value="_command.Nickname"></InputText>
                <ValidationMessage For="@(() => _command.Nickname)"></ValidationMessage>
            </div>
            <div class="row">
                <label>Password</label>
                <InputText id="password" class="form-control" @bind-Value="_command.Password"></InputText>
                <ValidationMessage For="@(() => _command.Password)"></ValidationMessage>
            </div>
            <div class="row">
                <label>Password confirmation</label>
                <InputText id="passwordConfirmation" class="form-control" @bind-Value="_command.PasswordConfirmation"></InputText>
                <ValidationMessage For="@(() => _command.PasswordConfirmation)"></ValidationMessage>
            </div>
            <div class="row submit-btn">
                <div class="col-md-4 offset-4">
                    <div class="row">
                        <input type="submit" class="btn btn-dark" value="Confirm"/>
                    </div>
                </div>
            </div>
        </EditForm>
        @if (_isValid)
        {
            <p class="error-message">@_requestErrorMessage</p>
        }
    </div>
</div>

@code {
    SignUpCommand _command;
    EditContext _signUpContext;
    bool _isValid = true;
    string _requestErrorMessage = string.Empty;
    protected override void OnInitialized()
    {
        _command = new SignUpCommand();
        _signUpContext = new EditContext(_command);
    }

    async Task HandleSubmit()
    {
        var response = await UserService.SignUp(_command);
        if (response.IsSuccessStatusCode)
        {
            //Pop up?
        }
        else
        {
            _isValid = false;
            var responseMessage = await response.Content.ReadFromJsonAsync<ErrorDto>();
            _requestErrorMessage = responseMessage.Message;
        }
    }


}